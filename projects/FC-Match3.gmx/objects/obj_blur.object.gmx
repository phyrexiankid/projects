<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create surface

global.pause=1;

//засекаем, сколько было перед началом заблюрювання
before_blur=date_current_datetime();

//пауза. создают сюрфейс, куда рисуются все остальные инстансы и вырубаются,
//а сюрфейс потом можно размывать
image_alpha=0
phase=0; // 0-растет 1-максимум 2-уменьшается
pause_type = 0;
pause_subtype=0;
time_plus = 0;
menu=0;

//эти три можно менять!
black_col=0.55;  // затемнение.                       default 0.3
blur_range=30;   // размытие.                         default 20
alpha=0.05*global.spd;       // скорость затемнения и размытия.   default 0.1
if Main.shader_supported=0 black_col=0.8;

hei=Main.j;
wid=ceil(Main.j/view_hview[0]*view_wview[0]);
log('wid= '+string(wid))
surf_size=view_hview[0]/hei;
log(surf_size)
Main.custom_2=string(wid)+'-'+string(surf_size);
/*noblur_surf = surface_create(view_wview[0],view_hview[0]);
blur_surf = surface_create(view_wview[0],view_hview[0]);
surf_factor  = surface_create(view_wview[0],view_hview[0]);
surf_post_blur = surface_create(view_wview[0],view_hview[0]);
sssurf = surface_create(view_wview[0], view_hview[0]);*/
noblur_surf = surface_create(wid,hei);
blur_surf = surface_create(wid,hei);
surf_factor  = surface_create(wid,hei);
surf_post_blur = surface_create(wid,hei);
sssurf = surface_create(wid,hei);
view_surface_id[view_current] = sssurf;


//ds_list_delete(Main.surface_list,ds_list_find_index(Main.surface_list,menu_surf));
ds_list_add(Main.surface_list,noblur_surf);
ds_list_add(Main.surface_list,blur_surf);
ds_list_add(Main.surface_list,surf_factor);
ds_list_add(Main.surface_list,surf_post_blur);
ds_list_add(Main.surface_list,sssurf);

//после скрипта сюрфейсов, когда все инстансы деактивированы,
//аларм с созданием менюшин
alarm[0]=2;

//если тут не ноль, то после оттаивания переходим на указанную
//внутреннюю закладку
transition_to=0;

var ptch=random_range(0.9,1);
scr_sound(snd_slide,1,0,ptch,1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(blur_surf);
surface_free(noblur_surf);
//if surface_exists(global.loose_surf) surface_free(global.loose_surf);
instance_activate_all();
if pause_type!=0 and pause_type!=1 and pause_type!=15 scr_music_unsupress(3);
if pause_type=0 {
    //в геймплейной паузе вместо этого резюме
    scr_music_resume();
}

//выключаем обратно те, которые в списке у мейна
//это например изначально выключенные закладки
for(i=0;i&lt;ds_list_size(Main.must_deactivate);i++) {
    instance_deactivate_object(ds_list_find_value(Main.must_deactivate,i));
}

global.pause=1;
if room=room_gameplay {
    scr_autopause();
    global.pause=1;
    if obj_controller_gameplay.time_current&lt;=0 {        
        Main.next_time_bonus=time_plus*room_speed;
        log('TIME PLUS MAIN= '+string(Main.next_time_bonus));
    }//дают время
    else log('no plus time');
    obj_controller_gameplay.alarm[11]=2;//room_speed/2;
} else global.pause=0;



//with obj_button {
//    if target!=0 and target!=global.bookmark_current visible=0;
//}
//with obj_button visible=1;


if transition_to!=0 {
if transition_to &lt; 100{ //если меньше 100 - перейти на нужный букмарк
    scr_open_bookmark_from_button(transition_to);
} else { //если больше то сделать какие то другие эффекты кастомные 
    switch transition_to{
    case 100: //поставить сундук открываться
        with obj_bookmark_chest {
            if chest_index=Main.chest_focused {
                var hr = Main.chest_timing[chest_tier]*60*60;//сек
                ts=scr_chest_time(hr);
                state=1;  
                //записать его сундучье время и сохранить
                Main.chest_time[chest_index]=date_current_datetime();
                Main.chest_focused=0; 
                scr_save();
                log(string('chest time=')+string(ts/60));
                scr_reset_push(ceil(ts/60));
            }
        } 
    break;
    case 101: //ресетнуть только что открытый сундук
        with obj_bookmark_chest {
            if chest_index=Main.chest_focused {
                state=0;
                randomize();
                var chns=random_range(1,100);//случайная редкость
                if chns&lt;80 chest_tier=1;//обычный
                else if chns&gt;=80 and chns&lt;96 chest_tier=2;//редкий 
                else if chns&gt;=96 chest_tier=3;//эпик 
                /*alarm[0]=1;*/
                //только что сундук ресетнулся и предметы добавились, так что сохраняем всё
                Main.chest_type[chest_index]=chest_tier;
                Main.chest_time[chest_index]=0;

                switch chest_tier {
                case 1: //обычный
                chest_sprite = sp_chest;
                break;
                case 2: //редкий 
                chest_sprite = sp_chest_gold;
                break;
                case 3: //эпический
                chest_sprite = sp_chest_epic;
                break;
                }
                
                scr_save();
            }
        } 
    break;
    case 102://улучшить за гемы вместо золота
        with Main.chest_focused {
                ts=scr_upgrade_time((Main.upgrade[upgrade_index,0]+1)*Main.upgrade[upgrade_index,2])/*scr_upgrade_time(cost_1)*/*60;
                state=1;
                Main.upgrade[upgrade_index,7]=date_current_datetime();
                scr_surf_upgrade(id); 
                scr_save();
                log(string('upgr time=')+string(ts/60));
                scr_reset_push(ts/60);
        }
    break;
    case 103://открыть сундук сейчас за гемы (их хватает)
        with obj_bookmark_chest {
            if chest_index=Main.chest_focused {
                Main.gems -= chest_open_cost;
                ts=0;
                state=2;  
                Main.chest_time[chest_index]=2;
                scr_save();
            }  
        }
    break;
    case 104://улучшить сейчас за гемы (их хватает)
        with Main.chest_focused {
                Main.gems -= upgrade_open_cost;
                ts=0;
                state=2;
                Main.upgrade[upgrade_index,7]=2;
                scr_surf_upgrade(id); 
                scr_save();
        }
    break;    
    case 105://геймплей - таймер бездействия когда выходишь из паузы
        scr_autopause();   
    break; 
    

    }
}
}

if room=room_bookmarks {
    //чекаем если кому надо обновить таймера на этой вкладке
    if global.bookmark=2 scr_check_timers(1);      //апгрейдам
    else if global.bookmark=4 scr_check_timers(2); //сундукам 
}

log('PAUSE IN BLUR = ' + string(global.pause));


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///то же что 0

timely_deactivated_list=ds_list_create();

with all {
ds_list_add(obj_blur.timely_deactivated_list,id);
}


sssurf = surface_create(wid,hei);
view_surface_id[view_current] = sssurf;
ds_list_add(Main.surface_list,sssurf);

instance_activate_all();
    
    for(var i=0; i&lt;ds_list_size(Main.must_deactivate); i++) {        
        instance_deactivate_object(ds_list_find_value(Main.must_deactivate,i));        
    }
    //instance_deactivate_object(obj_pause_menu); 
    obj_pause_menu.visible=0;
    for(var i=0; i&lt;ds_list_size(obj_pause_menu.button_list); i++) {
        with ds_list_find_value(obj_pause_menu.button_list,i) visible=0;
    }

alarm[0]=2;
visible=0;
//аларм заводим, потому что нужно прождать хотя бы 1 тик
//чтоб все успело нарисоваться на сюрфейсе
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Craete pause menus
if pause_type!=0 and pause_type!=1 and pause_type!=15 scr_music_supress(3);
if pause_type=0{
    //в геймплейной паузе вместо этого пауза
    scr_music_pause();
}


if !instance_exists(obj_pause_menu) {
    scr_surf_pause(id);
    var after_blur = date_current_datetime(); 
    Main.custom_1 = string(before_blur-after_blur)+'-'+string(date_second_span(before_blur, after_blur));//date_second_span(before_blur, after_blur);
    log(before_blur-after_blur);
    log(date_second_span(before_blur, after_blur));

    //if room = room_gameplay { //в геймплее 
    menu=instance_create(view_xview[0]+view_wview[0]/2,view_yview[0]+view_hview[0]/2,obj_pause_menu);
    menu.pause_type=pause_type;
    menu.pause_subtype=pause_subtype;
} else {
    scr_surf_pause(id);

    for(var i=0; i&lt;ds_list_size(timely_deactivated_list); i++) {
        instance_activate_object(ds_list_find_value(timely_deactivated_list,i));
    }
    instance_activate_object(obj_pause_menu); 
    obj_pause_menu.visible=1;
    for(var i=0; i&lt;ds_list_size(obj_pause_menu.button_list); i++) {
        with ds_list_find_value(obj_pause_menu.button_list,i) visible=1;
    }
    ds_list_destroy(timely_deactivated_list);
    visible=1;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if phase=0 {
    if surface_exists(noblur_surf) draw_surface_ext(noblur_surf,view_xview[0],0,surf_size,surf_size,0,noone,1);//surf_size
    else {image_alpha = 1; phase=1;}//alarm[1]=1; 
    draw_set_alpha(image_alpha);
    if surface_exists(blur_surf) draw_surface_ext(blur_surf,view_xview[0],0,surf_size,surf_size,0,noone,1);
    else {image_alpha = 1; phase=1;}//alarm[1]=1; 
    draw_set_color(c_black);
    draw_set_alpha(image_alpha*black_col);
    draw_rectangle(view_xview[0],0,view_xview[0]+view_wview[0],view_hview[0],0);
    draw_set_alpha(1);
    image_alpha+=alpha;
    if image_alpha &gt;= 1 {
        image_alpha = 1;
        phase=1;
    }    
} else if phase = 1 {    
    if surface_exists(blur_surf) draw_surface_ext(blur_surf,view_xview[0],0,surf_size,surf_size,0,noone,1);
    else alarm[1]=1;    
    draw_set_color(c_black);
    draw_set_alpha(black_col);
    draw_rectangle(view_xview[0],0,view_xview[0]+view_wview[0],view_hview[0],0);
    draw_set_alpha(1);
} else if phase = 2 {
    if surface_exists(noblur_surf) draw_surface_ext(noblur_surf,view_xview[0],0,surf_size,surf_size,0,noone,1);
    else instance_destroy();
    draw_set_alpha(image_alpha);
    if surface_exists(blur_surf) draw_surface_ext(blur_surf,view_xview[0],0,surf_size,surf_size,0,noone,1);//draw_surface(blur_surf,view_xview[0],0);
    else instance_destroy();
    draw_set_color(c_black);
    draw_set_alpha(image_alpha*black_col);
    draw_rectangle(view_xview[0],0,view_xview[0]+view_wview[0],view_hview[0],0);
    draw_set_alpha(1);
    image_alpha-=alpha;
    if image_alpha &lt;= 0 {
        image_alpha = 0;
        instance_destroy();
    }    
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

phase = 2;
time_plus = 15;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
