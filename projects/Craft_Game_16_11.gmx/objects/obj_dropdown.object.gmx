<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_amount</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>index=0;
inactive=0;
target=0;
parent=0;

list_lenght=7;
slider_width=30;

amount=0;
base_amount=0;
start=1;
begin_list=0;
last_y=0;
press_y=0;
slider_height=0;
drop_height=0;
slider_pos=0;
base_depth=-10;
extend_depth=-19;

sprite=sp_amount;
font=font_17;
line='';
full_line='';
color=c_white;
start_color_amount = make_color_rgb(199,7,51);
color_amount = start_color_amount;
width=100;
height=40;
custom_size=0;
blend=c_white;
arrow_shift_y=10;
arrow_shift_x=10;
created=0;
blend_color = c_white;
normal=1;
extended=0;
choosed=0;

droplist=ds_list_create();

visible=0;
alarm[0]=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dropdown stats

//sprite=sp_button_1;
//font=font_mana_12;
//line='';
//color=c_white;
//amount=0;
//add=1;
//minn=0;
//maxx=10;
//width=100;
//height=40;
//custom_size=0;
//arrow_shift_y=10;
//arrow_shift_x=10;
//blend_color = c_white;
//color_amount = make_color_rgb(98,0,49);
//normal=1;

switch index {
case 0: //craft-eat for craft
sprite=sp_amount;
font=font_17;
line='Choose food...';
color=c_white;
break;

case 1://craft-eat for gather
sprite=sp_amount;
font=font_17;
line='Choose food...';
color=c_white;
break;

case 2://craft tool
sprite=sp_amount;
font=font_17;
line='Hands';
color=c_white;
break;

case 3://forage tool
sprite=sp_amount;
font=font_17;
line='Hands';
color=c_white;    
break;

case 4://Ingredient 1 num  
sprite=sp_amount;
font=font_17;
line=0;
color=c_white;     
custom_size=1;
width=110; 
height=sprite_height; 
break;
    
case 5://Ingredient 2 num  
sprite=sp_amount;
font=font_17;
line=0;
color=c_white;  
custom_size=1;
width=110; 
height=sprite_height; 
if start=1 inactive=1;
break;
    
case 6://Ingredient 3 num  
sprite=sp_amount;
font=font_17;
line=0;
color=c_white;  
custom_size=1;
width=110; 
height=sprite_height; 
if start=1 inactive=1;
break;
    
case 7://Ingredient 1   
sprite=sp_amount;
font=font_17;
line='Ingredient 1';
color=c_white;  
break;
    
case 8://Ingredient 2   
sprite=sp_amount;
font=font_17;
line='Ingredient 2';
color=c_white;  
if start=1 inactive=1;
break;
    
case 9://Ingredient 3   
sprite=sp_amount;
font=font_17;
line='Ingredient 3';
color=c_white;  
if start=1 inactive=1;
break;

}

//recreate droplist?
scr_droplist_create();

sprite_index=sprite;
image_index=0;
image_speed=0;

if start {//change only first time
if custom_size {
    image_xscale=1/sprite_width*width;
    image_yscale=1/sprite_height*height;
}

drop_height=sprite_height-7;
}


visible=1;

/*if normal {
    draw_set_font(font);
    var spaces='';
    for(var i=0;i&lt;string_length(string(amount));i++) {
    spaces+=' ';
    }
    var lne=string(line)+' | ';
    line = string(line)+' | '+string(spaces);

    spaces='';
    for(var i=0;i&lt;string_length(lne);i++) {
    spaces+=' ';
    }
    amount_str = string(spaces)+string(amount);
} else {
    amount_str='';
}*/

if inactive=1 {
    image_blend=main.inactive_color;
    image_alpha=0.5;
} else {
    image_blend=c_white;
    image_alpha=1;
}
start=0;

full_line=line;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///show a dropdown list

if !extended and !main.blocked and !inactive{ //open list
    //we need to create a different maps when open this dropdowns
    //begin_list=0;
    scr_droplist_create();
    main.blocked=1;
    extended=1;
    if ds_list_size(droplist)&gt;list_lenght slider_height=(list_lenght*drop_height)/ds_list_size(droplist)*list_lenght;
    else slider_height=0;
    depth=extend_depth;
} else if extended { //close list 
    scr_droplist_close();
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_set_font(font);
draw_set_color(color);
draw_set_valign(fa_middle);
draw_set_halign(fa_center);
draw_text(x,y,full_line);


if extended { //dropdown list
    
    if mouse_check_button_pressed(mb_left) and (mouse_x&gt;x-sprite_width/2 and mouse_y&gt;y+drop_height/2 and mouse_x&lt;x+sprite_width/2 and mouse_y&lt;y+drop_height/2+drop_height*ds_list_size(droplist)) {
        //check if we scroll a list
        if ds_list_size(droplist)&gt;list_lenght {last_y=mouse_y; press_y=mouse_y;}
    } else if mouse_check_button(mb_left) and (mouse_x&gt;x-sprite_width/2 and mouse_y&gt;y+drop_height/2 and mouse_x&lt;x+sprite_width/2 and mouse_y&lt;y+drop_height/2+drop_height*ds_list_size(droplist)) {
        //elements of list being selected
        choosed=((mouse_y-(y+drop_height/2)) div drop_height) + begin_list;
        if slider_height&gt;0 {//scroll the list
        if abs(last_y-mouse_y)&gt;drop_height {
            begin_list+=sign(last_y-mouse_y);
            last_y=mouse_y;
            scr_droplist_scroll();
        }}
    } else if mouse_check_button_released(mb_left) and (mouse_x&gt;x-sprite_width/2 and mouse_y&gt;y+drop_height/2 and mouse_x&lt;x+sprite_width/2 and mouse_y&lt;y+drop_height/2+drop_height*ds_list_size(droplist)) {
        //we have choose an elements from the list; assign it and close dropdown
        if ds_list_size(droplist)&gt;list_lenght and abs(mouse_y-press_y)&gt;drop_height/2 {
        
        } else {
            scr_droplist_choose();
            scr_droplist_close();
        }
    } else if (mouse_check_button_pressed(mb_left) /*or mouse_check_button_released(mb_left)*/) and (mouse_x&lt;x-sprite_width/2 or mouse_y&lt;y-drop_height/2 or mouse_x&gt;x+sprite_width/2 or mouse_y&gt;y+drop_height/2+drop_height*ds_list_size(droplist)) {
        //click outside of the list
        scr_droplist_choose();
        scr_droplist_close();
    }
    
    for(var i=0; i&lt;min(ds_list_size(droplist),list_lenght); i++) {
        //backgrounds
        if choosed!=i+begin_list draw_set_color(main.color_button2);
        else draw_set_color(c_orange);/*draw_set_color(main.color_button1);*/
        draw_rectangle(x-sprite_width/2,y-drop_height/2+drop_height*(i+1),x+sprite_width/2,y+drop_height/2+drop_height*(i+1),0);
        draw_set_color(c_white);
        draw_text(x,y+drop_height*(i+1),ds_list_find_value(droplist,i+begin_list));
    }
    
    //mouse wheel scroll
    if mouse_wheel_down() {
        if slider_height&gt;0 {
            begin_list+=1;
            scr_droplist_scroll();
        }
        choosed=clamp(choosed+1,0,ds_list_size(droplist)-1);
    } else if mouse_wheel_up() {
        if slider_height&gt;0 {
            begin_list-=1;
            scr_droplist_scroll();
        }
        choosed=clamp(choosed-1,0,ds_list_size(droplist)-1);
    }
    
    //draw slider
    if slider_height&gt;0 {
        draw_set_color(c_silver);
        draw_rectangle(x+sprite_width/2+1,y+drop_height/2,x+sprite_width/2+slider_width,y+drop_height/2+drop_height*list_lenght,0);
        draw_set_color(main.color_dkgray);
        draw_rectangle(x+sprite_width/2+1,y+drop_height/2+slider_pos,x+sprite_width/2+slider_width,y+drop_height/2+slider_height+slider_pos,0);
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
