<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_button_1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>index=0;
sub_index=0;

clicked=0;
inactive=0;
target=0;
parent=0;

sprite=sp_button_1;
font=font_17;
line='';
color=c_white;
width=100;
height=40;
custom_size=0;
blend=c_white;
tool=main.tool_label[0];
delay=0;
shift=14;

visible=0;
alarm[0]=1;

//delay
value=0;
delay=1/(room_speed*1);
dx1=0; 
dx2=0;
dy1=0;
dy2=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///click effect
randomize();



switch index {

case 0: //craft - eat for craft
if main.craft_energy&gt;=100 {

    scr_flashing(x-sprite_xoffset,x-sprite_xoffset+sprite_width-1,y-sprite_yoffset,y-sprite_yoffset+sprite_height,room_speed,id);
    scr_flashing(room_width/2-16-(512-32),room_width/2-16,1736,1736+47,room_speed,id);
    scr_sound(snd_alarm,1,0,random_range(0.9,1.1),1.2);
    
} else {

    var food='';
    with obj_dropdown {
        if index=0 {
            food=line;
        }
    }
    scr_energy_add(0,scr_eat(food)); 
    with obj_dropdown {
        if index=1 {
            scr_droplist_create();
        }
    }

}
break;

case 1: //craft - eat for gather
    if main.gather_energy&gt;=100 {

        scr_flashing(x-sprite_xoffset,x-sprite_xoffset+sprite_width-1,y-sprite_yoffset,y-sprite_yoffset+sprite_height,room_speed,id);
        scr_flashing(room_width/2+16,room_width/2+16+(512-32),1736,1736+47,room_speed,id);
        
        scr_sound(snd_alarm,1,0,random_range(0.9,1.1),1.2);
    } else {
    
        var food='';
        with obj_dropdown {
        if index=1 {
            food=line;
        }
}
scr_energy_add(1,scr_eat(food)); 
with obj_dropdown {
    if index=0 {
        scr_droplist_create();
    }
}
}
break;

case 2: //craft - craft

//create the list of ingredients we use
var ingr_list=ds_list_create();
with obj_dropdown {
    if index=9 {
        if line!='' {
            with obj_dropdown {
                if index=6 {
                    var num=floor(real(line));
                    if num&lt;1 num=1;
                    repeat(num) { ds_list_add(ingr_list,ds_list_find_index(main.item_list,other.line)); }
                }
            }
        }
    }
    if index=8 {
        if line!='' {
            with obj_dropdown {
                if index=5 {
                    var num=floor(real(line));
                    if num&lt;1 num=1;
                    repeat(num) { ds_list_add(ingr_list,ds_list_find_index(main.item_list,other.line)); }
                }
            }
        }
    }
    if index=7 {
        if line!='' {
            with obj_dropdown {
                if index=4 {
                    var num=floor(real(line));
                    if num&lt;1 num=1;
                    repeat(num) { ds_list_add(ingr_list,ds_list_find_index(main.item_list,other.line)); }
                }
            }
        }
    }
}
//if we have any ingredients
if ds_list_size(ingr_list)&gt;0 {
    ds_list_sort(ingr_list,1); 
    var label_map=ds_map_find_value(main.recipe_map,"Craft");
    if !is_undefined(label_map) {
        var tool_list=ds_map_find_value(label_map,tool);
        if !is_undefined(tool_list) {
            //check if any recipe in this category match our ingredients
            for(var i=0;i&lt;ds_list_size(tool_list);i++) {
                var current_list=ds_list_find_value(tool_list,i);
                var required_ingredients_list=ds_list_find_value(current_list,1);
                ds_list_sort(required_ingredients_list,1);
                //write both lists as a strings to see if they match
                if ds_list_write(required_ingredients_list)==ds_list_write(ingr_list) {
                    //do we have enough skill to craft this?
                    if ds_map_find_value(main.skill_map,ds_list_find_value(current_list,2))&gt;=ds_list_find_value(current_list,3) {
                        //set button delay
                        scr_set_delay(2-(ds_map_find_value(main.skill_map,ds_list_find_value(current_list,2)) div 100)*.25+4*(main.craft_energy&lt;0));

                        //we have enough skill. 
                        //do we have energy?
                        //subtract gather energy
                        var energy=ds_list_find_value(current_list,4);
                        if main.craft_energy-energy&gt;=-100 {
                            main.craft_energy-=energy;
                        } else break;
                        
                        //do we already know this recipe?
                        var success=0;
                        if ds_list_find_index(main.descovered_recipes_list,ds_list_find_value(current_list,0))!=-1 {
                            //we already know this recipe
                            var chanse=clamp(25 + 0.75 * (ds_map_find_value(main.skill_map,ds_list_find_value(current_list,2))-ds_list_find_value(current_list,3)),25,99);
                            if chanse&gt;=random_range(0,100) success=1;
                        } else {//just discover this recipe
                            ds_list_add(main.descovered_recipes_list,ds_list_find_value(current_list,0));//save
                            //add it as a string
                            ds_list_add(main.recipe_list,scr_create_recipe_string(current_list,tool));
                            //recipes is always success for the first time 
                            if ds_list_find_index(main.skill_list,ds_list_find_value(current_list,2))=-1 ds_list_add(main.skill_list,ds_list_find_value(current_list,2));
                            success=1;
                            with main.tab[2,2] {
                            scr_flashing(x-sprite_xoffset,x-sprite_xoffset+sprite_width-1,y-sprite_yoffset,y-sprite_yoffset+sprite_height,0,id);
                            }
                            if obj_story.condition[6]=0 { //first recipe discovered
                                obj_story.condition[6]=1;
                                //add message - tutorial message 3
                                scr_message_add(1,3);
                            }
                            if obj_story.condition[7]=0 and ds_list_find_value(current_list,0)=5010 { //knife recipe discovered
                                obj_story.alarm[2]=room_speed*30;
                            }
                        }
                        if success {
                            //craft succeeds!
                            //check what items we get
                            var result_map=ds_map_create();
                            for(var i=0;i&lt;ds_list_size(ds_list_find_value(current_list,5));i++) {
                                var v=ds_list_find_value(ds_list_find_value(current_list,5),i);
                                if !is_undefined(ds_map_find_value(result_map,v)) {
                                    ds_map_replace(result_map,v,ds_map_find_value(result_map,v)+1);
                                } else {
                                    ds_map_add(result_map,v,1);
                                }
                            }
                            //show indicators for each type of object
                            var fst=ds_map_find_first(result_map);
                            for(var i=0;i&lt;ds_map_size(result_map);i++) {
                                scr_indicator('item',main.item[0,fst],ds_map_find_value(result_map,fst));
                                scr_inventory_add(fst,ds_map_find_value(result_map,fst));
                                if i&lt;ds_map_size(result_map) fst=ds_map_find_next(result_map,fst);
                            }   
                            ds_map_destroy(result_map);
                        } else {
                            //gather failed!
                            //add 1-9 points of used skill
                            var add_skill=ceil(random_range(0.01,9));
                            ds_map_replace(main.skill_map,ds_list_find_value(current_list,2),ds_map_find_value(main.skill_map,ds_list_find_value(current_list,2))+add_skill);
                            scr_indicator('skill',ds_list_find_value(current_list,2),add_skill);
                            if ds_list_find_index(main.skill_list,ds_list_find_value(current_list,2))=-1 ds_list_add(main.skill_list,ds_list_find_value(current_list,2));
                        }
                        //check for story message
                        if obj_story.condition[5]=0 {
                            var chance = random_range(0,100);
                            if chance&gt;=(100-1) {
                                //obj_story.condition[5]=1;
                                //add message - story message 7
                                scr_message_add(0,7);
                            }
                        }
                        //subtract ingredients and craft tool durability
                        for(var i=0; i&lt;ds_list_size(ingr_list); i++) {
                            scr_inventory_add(ds_list_find_value(ingr_list,i),-1);
                        }
                        if tool!=main.tool_default {
                            var tl='';
                            with obj_dropdown {
                                if index=2 {
                                    tl=line;
                                }
                            }
                            scr_tool_use(tl);
                        }
                        
                        break;//stop looking through the list
                    }
                }  
            }
        }
    }

}
ds_list_destroy(ingr_list);
    //ds_map_destroy(label_map);
    //ds_list_destroy(tool_list);

break;

case 3: //craft - gather

//check for story message
if obj_story.condition[1]&lt;25 {
    obj_story.condition[1]+=1;
    if obj_story.condition[1]&gt;=25 {
        //add message - tutorial message 2
        scr_message_add(1,2);
        
        //give quest 2
        if obj_story.condition[9]=0 {
            obj_story.condition[9]=1;
            //add message - active quest 1
            scr_message_add(2,2);
        }
           
    }
}
//check for story message
if obj_story.condition[4]=0 {
    var chance = random_range(0,100);
    if chance&gt;=(100-2) {
        //obj_story.condition[4]=1;
        //add message - story message 6
        scr_message_add(0,6);
    }
}

//subtract gather energy
var energy=2;
if tool=main.tool_label[0] energy=1;
if main.gather_energy-energy&gt;=-100 {
    main.gather_energy-=energy;
} else break;
//checking what we can forage with choosen forage label, tool and skill level
if !is_undefined(ds_map_find_value(main.recipe_map,line)) {
    var label_map=ds_map_find_value(main.recipe_map,line);
    var tool_list=ds_map_find_value(label_map,tool);
    if !is_undefined(tool_list) {
        var possible_list=ds_list_create(); //a list to add possible resources
        for(var i=0;i&lt;ds_list_size(tool_list);i++) {
            //check all recipes in this category:
            //do we have enough skill to gather this?
            var current_list=ds_list_find_value(tool_list,i);
            if ds_map_find_value(main.skill_map,ds_list_find_value(current_list,2))&gt;=ds_list_find_value(current_list,3) {
                //we have enough skill - add this to possible list
                ds_list_add(possible_list,i);
            }
        }
        if ds_list_size(possible_list)&gt;0 {
            //we have a list of possible items to forage. 
            //calculate our chanse to forage something
            var s=ceil(random_range(-0.99,ds_list_size(possible_list)-1));
            var t=ds_list_find_value(possible_list,s);
            var choosen_list=ds_list_find_value(tool_list,t);
            var chanse=clamp(25 + 0.75 * (ds_map_find_value(main.skill_map,ds_list_find_value(choosen_list,2))-ds_list_find_value(choosen_list,3)),25,99);
            if chanse&gt;=random_range(0,100) {
                //gather succeeds!
                //check what items we get
                var result_map=ds_map_create();
                for(var i=0;i&lt;ds_list_size(ds_list_find_value(choosen_list,5));i++) {
                    var v=ds_list_find_value(ds_list_find_value(choosen_list,5),i);
                    if !is_undefined(ds_map_find_value(result_map,v)) {
                        ds_map_replace(result_map,v,ds_map_find_value(result_map,v)+1);
                    } else {
                        ds_map_add(result_map,v,1);
                    }
                }
                //show indicators for each type of object
                var fst=ds_map_find_first(result_map);
                for(var i=0;i&lt;ds_map_size(result_map);i++) {
                    scr_indicator('item',main.item[0,fst],ds_map_find_value(result_map,fst));
                    scr_forage_add(main.item[0,fst],ds_map_find_value(result_map,fst))
                    scr_inventory_add(fst,ds_map_find_value(result_map,fst));
                    if i&lt;ds_map_size(result_map) fst=ds_map_find_next(result_map,fst);
                }   
                ds_map_destroy(result_map);
            } else {
                //gather failed!
                //add 1-9 points of used skill
                var add_skill=ceil(random_range(0.01,9));
                ds_map_replace(main.skill_map,ds_list_find_value(choosen_list,2),ds_map_find_value(main.skill_map,ds_list_find_value(choosen_list,2))+add_skill);
                scr_indicator('skill',ds_list_find_value(choosen_list,2),add_skill);
                if ds_list_find_index(main.skill_list,ds_list_find_value(choosen_list,2))=-1 ds_list_add(main.skill_list,ds_list_find_value(choosen_list,2));
                
                //check for story message
                if obj_story.condition[2]=0 and ds_map_find_value(main.skill_map,main.skill[0])&gt;=100 {
                    obj_story.condition[2]=1;
                    //add message - story message 4
                    scr_message_add(0,4);
                }
            }
            //set button delay
            scr_set_delay(3.33-(ds_map_find_value(main.skill_map,ds_list_find_value(choosen_list,2)) div 100)*.33+6*(main.gather_energy&lt;0));
            //subtract craft tool durability
            if tool!=main.tool_default {
                var tl='';
                with obj_dropdown {
                    if index=3 tl=line;           
                }
                scr_tool_use(tl);
            }
        }
    }
    //ds_map_destroy(label_map);
    //ds_list_destroy(tool_list);
}
break;

case 4: //settings - restart to splash
game_restart();
break;

case 5: //settings - restart to story
with main instance_destroy()
instance_create(0,0,main)
room_restart();
break;

case 6: //logs - complete quests - collect reward
//TODO - add quest reward
switch sub_index {
case 1: //'+50 Energy'; 
scr_energy_add(0,50);
scr_energy_add(1,50);
break;
case 2: //'Full Energy'; 
scr_energy_add(0,999);
scr_energy_add(1,999);
break;
}
//destroy button and remove from the lists
instance_destroy();
ds_list_delete(main.quest_buttons_list,ds_list_find_index(main.quest_buttons_list,id));
ds_list_delete(main.tab[1,3].child_list,ds_list_find_index(main.tab[1,3].child_list,id));
with obj_text_scroll alarm[0]=1;
break;

}

clicked=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///button stats

//width=100;
//height=40;
//custom_size=0;
//blend=c_white;

switch index {
case 0: //craft - eat for craft
sprite=sp_button_1;
font=font_18b;
line='Eat for#craft';
color=c_white;
break;

case 1: //craft - eat for forage
sprite=sp_button_1;
font=font_18b;
line='Eat for#gather';
color=c_white;
break;

case 2: //craft - craft
sprite=sp_button_1;
font=font_18b;
line='Craft';
color=c_white;
break;

case 3: //craft - gather
sprite=sp_button_1;
font=font_18b;
line='Forage';
color=c_white;
break;

case 4: //settings - restart to splash
sprite=sp_button_1;
font=font_18b;
line='Restart (to splash)';
color=c_white;
width=300;
height=132;
custom_size=1;
break;

case 5: //settings - restart to story
sprite=sp_button_1;
font=font_18b;
line='Restart (to story)';
color=c_white;
width=300;
height=132;
custom_size=1;
break;

case 6: //logs - complete quests - collect reward
sprite=sp_amount;
font=font_17;
line='Collect reward!';//+string(sub_index);
color=c_white;
width=264;
height=54-10;
custom_size=1;
shift=7;
break;



}

sprite_index=sprite;
image_index=0;
image_speed=0;
image_blend=c_white;

if custom_size {
    image_xscale=1/sprite_width*width;
    image_yscale=1/sprite_height*height;
}

dx1=x-sprite_xoffset;  
dx2=dx1+sprite_width;
dy1=y-sprite_yoffset;
dy2=dy1+sprite_height;

visible=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>clicked=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if clicked=1 and !main.blocked {
    alarm[1]=1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//can't click if button is freezed
if value&gt;0 {
    if index=3 or index=2 scr_sound(snd_alarm,1,0,random_range(0.9,1.1),1.2);
    exit;
}

clicked=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_sprite_ext(sprite_index,clicked,x,y,image_xscale,image_yscale,0,image_blend,image_alpha);

if value&gt;0 { //round loading
    value-=delay;
    if value&lt;=0 value=0;
    draw_set_color(c_orange)
    scr_draw_roundload(dx2, dy1, dx1, dy2, value)
}

draw_set_font(font);
draw_set_color(color);
draw_set_valign(fa_middle);
draw_set_halign(fa_center);
draw_text(x,y+clicked*shift,line);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
