<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_text</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>index=0;
//0- log-story
//1- log-active quests
//2- log-completed quests
line='#';
border=46;//from left and right
top=6+main.subtab_height+90+1;
bottom=1819;
sep=42;
font=font_18b;

lines=0;
line_height=0;
textbox_height=bottom-top;
text_height=0;
text_width=room_width-border*2;
slider_height=0;
text_pos=0;//position of the top of the line
x=border;
y=top;
image_xscale=text_width;
image_yscale=textbox_height;
separator_line=0;
y_prev=0;
first=1;

//text surface
surf=surface_create(1024,textbox_height);
ds_list_add(main.surf_list,surf);

slider=instance_create(room_width-border/2,top,obj_text_scroll_slider);
slider.target=id;


alarm[0]=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with slider instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///(re-)draw text and slider
//compile text for the first time or if it was changed
font=font_20b;
line='#';

if slider.parent=0 {
    slider.parent=parent;
    ds_list_add(parent.child_list,slider);
}

//separator line parameters 
var txt_wdth=string_width_ext('___',sep,text_width);
var txt_wdth2=string_width_ext('_ _',sep,text_width);//cant measure a space width itself for some reasons
var wdth_underscore=txt_wdth/3;
var wdth_space=txt_wdth2-(txt_wdth/3*2);
var num_underscore = text_width/3*2 div wdth_underscore;
var num_space = (text_width-wdth_underscore*num_underscore) div wdth_space;
var sp_line='';
repeat(num_space/2){sp_line+=' ';}
repeat(num_underscore){sp_line+='_';}

switch index {
case 0: //0- log-story
separator_line=1; 
var story=0;

//put text in one line
for (var i=0;i&lt;ds_list_size(main.message_list[index]);i++) {
    if ds_list_find_value(main.message_list[index],i) mod 1 = 0 {//story message
        line+=string(main.txt_story[ds_list_find_value(main.message_list[index],i)]);
        story+=1;
    } else if ds_list_find_value(main.message_list[index],i) mod 1 = 0.1 {//tutorial message
        line+='(Tutorial) ';
        line+=string(main.txt_tutorial[ds_list_find_value(main.message_list[index],i)-0.1]);
    }
    if !separator_line or i&gt;=ds_list_size(main.message_list[index])-1 line+='##';
    else line+='#'+string(sp_line)+'##';
    //if separator_line and i&lt;ds_list_size(main.message_list[index])-1
}
//send info about how much complete to its subtab
main.tab[1,1].info_value = ceil(100/(array_length_1d(main.txt_story)-1)*story);
with main.tab[1,1] info=scr_subtab_info();
break;

case 1: //1- log-active quests
separator_line=0;

for (var i=0;i&lt;ds_list_size(main.message_list[index]);i++) {
    var nm=ds_list_find_value(main.message_list[index],i);
    line+=string(main.txt_quest[nm]);
    line+=' ('+string(obj_story.quest[nm])+'/'+string(obj_story.quest_target[nm])+').'
    line+='##';
}

break;

case 2: //2- log-completed quests
separator_line=0;

//add all buttons to the list
var dsl_buttons=ds_list_create();
for (var b=0;b&lt;ds_list_size(main.quest_buttons_list);b++) {
    with ds_list_find_value(main.quest_buttons_list,b) {
        dsl_buttons[| b] = sub_index;
    }
}

for (var i=0;i&lt;ds_list_size(main.message_list[index]);i++) {
    var nm=ds_list_find_value(main.message_list[index],i);
    line+=string(main.txt_quest[nm])+'.'
    //add a reaward string if it was not yet collected 
    //if a reward button exists?
    var exists=0;
    with obj_button {
        if index=6 and sub_index=nm exists=1;
    }
    
    //if button exists, show reward
    if ds_list_find_index(dsl_buttons,nm)!=-1 {
        line+='#                                   (Reward: ';
        switch nm { //determine a reward string 
        case 1: line+='+50 Energy'; break;
        case 2: line+='Full Energy'; break;
        }
        line+=')#';
    } else {
        line+='##';
    }
    
}
ds_list_destroy(dsl_buttons);

break;

case 3: //craft - recipes
separator_line=0;
font=font_20b;
for (var i=0;i&lt;ds_list_size(main.recipe_list);i++) {
    line+=string(ds_list_find_value(main.recipe_list,i));
    line+='##';
}

//send info about how much complete to its subtab
main.tab[2,2].info_value = ds_list_size(main.descovered_recipes_list);
with main.tab[2,2] info=scr_subtab_info();
break;
}

//finding the height of this textbox and slider
draw_set_font(font);
draw_set_valign(fa_top);
draw_set_halign(fa_left);
text_height=string_height_ext(line,sep,text_width);
line_height=string_height_ext('line',sep,text_width);
lines=min(floor(text_height/line_height),1);

//whether or not to show slider
if text_height&lt;=textbox_height slider_height=0; //all text is on the screen, dont show slider
else {
    slider_height=max(textbox_height/(text_height/textbox_height),20);
}
if slider_height&gt;0 {slider.image_yscale=slider_height; slider.visible=1}
else slider.visible=0;

//finding the top of the text (now - by default)
if slider_height&lt;=0 text_pos=y;             //all text is on the screen
else {
    switch index {
    case 0: //story - scrolled to the bottom by default
    text_pos = bottom-text_height; 
    break;
    
    case 1: //active quest - on the top by default
    text_pos = top; 
    break;
    
    case 2://complete quest - scrolled to the bottom by default
    text_pos = bottom-text_height;
    break;
    
    case 3: //craft - recipes
    text_pos = bottom-text_height; 
    break;
    }      
}

if index=2 { //rearrange collect reward buttons positions
    for(var i=0; i&lt;ds_list_size(main.quest_buttons_list); i++) {
        with ds_list_find_value(main.quest_buttons_list,i) {
            var position=ds_list_find_index(main.message_list[2],sub_index)+1;
            y=other.text_pos+16+position*(other.line_height*2)-((position*2-1)*(other.line_height-other.sep));
            x=other.x+sprite_width/2;
            if y&lt;other.top or y&gt;other.bottom visible=0;
            else visible=1;
        }
    }
}

//draw text and move slider
scr_surf_text();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y_prev=mouse_y;
with slider y_prev=mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y_prev=mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///moving the text

if mouse_check_button_pressed(mb_left) or text_height&lt;=textbox_height exit;

if abs(y_prev-mouse_y)&gt;line_height {

    var shift = line_height*sign(y_prev-mouse_y);
    
    scr_slider_move(shift);
    
    y_prev=mouse_y;

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//slider
if slider_height&gt;0 {
    draw_set_color(c_silver/*main.color_gray*/)
    draw_rectangle(room_width-border,top,room_width,bottom,0);
    
    if mouse_wheel_up() {
        var shift = -line_height;
        scr_slider_move(shift);
    } else if mouse_wheel_down() {
        var shift = line_height;
        scr_slider_move(shift);
    }
}

if surface_exists(surf) draw_surface(surf,x,y);
else scr_surf_text();




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
